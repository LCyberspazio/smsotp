**********************************************************
*             Shy Message System One Time Pad            *
*                        ver: 0.1                        *
*                                                        *
*         by Giovanni @LCyberspazio Santostefano         *
*              email me: bad.ger@email.it                *
*      gpg pubkey: https://pastebin.com/raw/2qFUZWG5     *
**********************************************************


The following document describes a protocol for a one time pad 
cipher (https://en.wikipedia.org/wiki/One-time_pad) that is usable 
without a computer or, at least a minimal use of technology.

As a weekend project I'm not responsible of any possible cipher 
breaking or any damage derived by reading and using informations of 
this document (do not read this while walking alone in a dark road).

KEY
The key of the cipher will be a book or a random block generated by 
the following commands

$ dd bs=1 count=4096 if=/dev/urandom of=test.key
$ base64 -w80 test.key > key.otp

key.otp:
bdW9RZu6Eoke5Zvu9ym+ORlE8YCaJfB7WOCKzV43kleAG0EWeGc7vVh0wPbuC8EEt3gVMtai2+TSOgu6
1p6SA5LK0reC+u5ntfiJJziZTVcdBvdIXnV3eJRsYnklYpf0LnrStw6hcRjTYkmxh7hgQgqxn5CtAwHC
GTgUdhbEzsKfG5yzkwVp5orlEMiTsUttN7PqjJlj3wBPIw7FSo1Bt49kgsDPssOCnJTO2nt5IcMxyxCj
1hW2Ixq1Rvijz1B3miSWTd4vKwd+WGF2Va0Byc3azFP19eT28dxfozXfFCX/FCf7DvNrYtKD/duo/+UK
MHqTPIjanBm+9lmWXruhyGVAMX9UOTtypHFHuHnCt00U2wJ1CC4F43XBoL2KvC2sPJT2Wz6P8Jvs/XR2
wFs/KoEOXKVQ03KdGV3VYTg7AhhDJw4dwigF4cG7UF+zWLQSMqyRHbttmP5tPOqvEr5BWlkyuHsdpYfp
Ln/C3U2BYjusiIO1z8CyKLllLMgG/foev+mAgWsspiNh9JwIcBeKxw7dka89y5cNRlTolzWefuzNNCUz
2norA+AkLG0rjL8u8toMfekaTLZEAVEQE/vusrF5dDLwLrhUJyOtYPcKNp8ublVd5WEfbr2rS+ADGYOt
FXAaEEQnuZ493E7d4LaeF+cvfrZmQOtVgssft/kHFU1Os25f9Zm5OZwCxy7fb55QalmbMkvGqm9x5ND7
mjXbFiNlxBZRTkP5nBtIE/8IWJ4M+dG5bkLwGTd6WerY3F8JJdKlC7HNBBNq4AfHulidW6LOD7U/rZZ9
...
...
...

Now that we have our key.otp file, we can print it and exchange a copy 
with our contact. With this way, the problem is the deniability, as a 
random huge string of characters is way more strange than using the 
classic book as OTP key. So we assume you are going to use a book.

PROTOCOL
Alice meets Bob at library and they both buy the same edition of 1984. 
It will be their key for some time. This method only rely on key secrecy. 
So the random string key is much more secure but of course meets more 
the eye than a book.
They also exchange a numeric passphrase, eg. 2514

Now we have:
- book as key: example 1984 from George Orwell
- a passphrase: example 2514

Bob wants to send alice a message. It's the 1st of February, so he 
takes the 2nd chapter of 1984 at the 1st page. If it was the 30 of 
July and the 7th chapter contains only 10 pages, Bob should count to 
30 and skip back to the beginning of 7th chapter each time he reaches 
the end, basically a module operation.
He wrote on the encrypted message a random character, eg. a L and he 
seek in the text for the first L, the next char will be the starting 
point for encrypting the message.

Imagine the message is "Hello Alice". We all consider lower case and 
without spaces or marks, then the message became "helloalice" and in
a real case scenario, we consider to also add a padding of nonsense
characters, like "helloalicezzzbbb" just to harden the thing, but for
this document purpose we will use "helloalice".
And this is the beginning of the 'key text' where we are in search of 
the first 'L'.

-Chapter 2
-As he put his hand to the door-knob Winston saw that he had left 

Now we found in 'left' the L for the starting point. As our key is 
2514, we shift 2 chars after the L to find the key for the first char 
of the message, in this key the 't', then we skip 5 chars after the 
't' (excluding whitespaces), then 1 char after the next and 4 chars 
after the next and then begin with 2. So we use each number as a 
shift.
Taking this text

-Chapter 2
-As he put his hand to the door-knob Winston saw that he had left
-the diary open on the table. DOWN WITH BIG BROTHER was written all 
-over it, in letters almost big enough to be legible across the room. 
-It was an inconceivably stupid thing to have done. But, he realized, 

The key with 2514 of the message HelloAlice without spaces will be
tayoheotih   -> that we will XOR with
helloalice   -> to have the encrypted text
----------



We just substract the clear text code to the key char code, using this 
table

A = 1
B = 2
C = 3
D = 4
E = 5
F = 6
G = 7
H = 8
I = 9
J = 10
K = 11
L = 12
M = 13
N = 14
O = 15
P = 16
Q = 17
R = 18
S = 19
T = 20
U = 21
V = 22
W = 23
X = 24
Y = 25
Z = 26

This way we make
h - t =  8 - 20 = -12 = l
e - a =  5 -  1 =   4 = D
l - y = 12 - 25 = -13 = m
l - o = 12 - 15 = - 3 = c
o - h = 15 -  8 =   7 = G
a - e =  1 -  5 = - 4 = d
l - o = 12 - 15 = - 3 = c
i - t =  9 - 20 = -11 = k
c - i =  3 -  9 = - 6 = f
e - h =  5 -  8 = - 3 = c

The ecrypted message is 
LlDmcGdckfc
where the uppercase letters are for positive numbers while lower case 
are for negative numbers in the table.

This method is used as this cipher is designed to be used without the 
assistance of a computer, otherwise you may just use the classic XOR 
operation between the two strings.

Now Bob sends to Alice the LlDmcGdckfc string and because Alice is 
able to calculate the same key from the 1984 text, as she knows the 2514 
pin and the start char L, she is able to reproduce the clear text

t + l = 20 - 12 =  8 = h
a + D =  1 +  4 =  5 = e
y + m = 25 - 13 = 12 = l
o + c = 15 -  3 = 12 = l
h + G =  8 +  7 = 15 = 0
e + d =  5 -  4 =  1 = a
o + c = 15 -  3 = 12 = l
t + k=  20 - 11 =  9 = i
i + f=   9 -  6 =  3 = c
h + c=   8 -  3 =  5 = e

The message helloalice is reconstructed. 
 
NEXT MESSAGES
Building the key for the message, even Bob and Alice mark the last 
word where they took the last letter, in our case 'BROTHER', so for 
the next message they will start with the word next to BROTHER. If the 
chapter ends, the will continue in the book.
The next day, they will start from the 2nd page of the 2nd chapter, 
and so on.
If a security warning is happening, they may add to the end of the 
clear text message a string to identify the page where to start the 
key-gen in a way like this.
aec = 153 = for the next message key start at page 153

SECURITY ISSUES
In this cipher are known in the encrypted text the distances between 
the clear characters and the key characters. Also, it's known that the 
first message of the 4th of September has its key hidden in the 4th 
page of the 9th chapter of some book. 
The frequency of letters in the words of a language, means that many 
letters may be encrypted with a,e,i,o,u.

These issues are only related to the use of books as source of the 
keygen. If you print a otp like this:

bdW9RZu6Eoke5Zvu9ym+ORlE8YCaJfB7WOCKzV43kleAG0EWeGc7vVh0wPbuC8EEt3gVMtai2+TSOgu6
1p6SA5LK0reC+u5ntfiJJziZTVcdBvdIXnV3eJRsYnklYpf0LnrStw6hcRjTYkmxh7hgQgqxn5CtAwHC
GTgUdhbEzsKfG5yzkwVp5orlEMiTsUttN7PqjJlj3wBPIw7FSo1Bt49kgsDPssOCnJTO2nt5IcMxyxCj
1hW2Ixq1Rvijz1B3miSWTd4vKwd+WGF2Va0Byc3azFP19eT28dxfozXfFCX/FCf7DvNrYtKD/duo/+UK
MHqTPIjanBm+9lmWXruhyGVAMX9UOTtypHFHuHnCt00U2wJ1CC4F43XBoL2KvC2sPJT2Wz6P8Jvs/XR2
wFs/KoEOXKVQ03KdGV3VYTg7AhhDJw4dwigF4cG7UF+zWLQSMqyRHbttmP5tPOqvEr5BWlkyuHsdpYfp
Ln/C3U2BYjusiIO1z8CyKLllLMgG/foev+mAgWsspiNh9JwIcBeKxw7dka89y5cNRlTolzWefuzNNCUz
2norA+AkLG0rjL8u8toMfekaTLZEAVEQE/vusrF5dDLwLrhUJyOtYPcKNp8ublVd5WEfbr2rS+ADGYOt

you can start with the first 'L' or other character selected and then 
continue until the end of the otp. Once the otp is ended, the old copy 
is discarded and then a new one must be generated and exchanged 
between you and your contacts.

Words are written without spaces because humanscanreadwithoutspaces 
avoiding the space that is a frequent character.

Also you can use a newspaper to generate the key for each day or other 
papers you can find multiple exact copies of.

